<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
	<mapper namespace="com.howard.dao.UserDao">
	
	<resultMap id="BaseResultMap" type="com.howard.entity.User" >
		<!-- 主键 -->
	    <id column="id" property="id" jdbcType="INTEGER" />
	    <result column="username" property="username" jdbcType="VARCHAR" />
	    <result column="password" property="password" jdbcType="VARCHAR" />
	    <result column="age" property="age" jdbcType="INTEGER" />
		 <!--<result column="deleted" property="deleted" jdbcType="BIT" /> -->
	</resultMap>
	
	<!-- 用于select查询公用抽取的列 -->
	<sql id="columns">
		<![CDATA[
			`id`,`username`,`password`,`age`
		]]>
	</sql>
	
	<sql id="findWhere">
		<!-- 拓展方法 -->
		<!-- ognl访问静态方法的表达式 为@class@method(args),以下为调用Ognl.isNotEmpty()方法,还有其它方法如isNotBlank()可以使用，具体请查看Ognl类 -->
		<!-- 可自定义验证静态验证方法，按如上验证 -->
		<where>
        <if test="user.username!=null">
          AND `username` = #{user.username, jdbcType=VARCHAR}
        </if>
        <if test="user.age!=null">
          AND `age` = #{user.age, jdbcType=INTEGER}
        </if>
		</where>	
	</sql>
	
	<!-- 采用拓展ognl的方式 @类名@方法名(参数) -->
	<sql id="findWhereUseClass">
		<!-- 拓展方法 -->
		<!-- ognl访问静态方法的表达式 为@class@method(args),以下为调用Ognl.isNotEmpty()方法,还有其它方法如isNotBlank()可以使用，具体请查看Ognl类 -->
		<!-- 可自定义验证静态验证方法，按如上验证 -->
		<where>
        <if test="@com.howard.common.Ognl@isNotEmpty(user.username)">
          AND `username` = #{user.username, jdbcType=VARCHAR}
        </if>
        <if test="@com.howard.common.Ognl@isNotEmpty(user.age) and 
        @com.howard.common.Ognl@isNumber(user.age)">
          AND `age` = #{user.age, jdbcType=INTEGER}
        </if>
		</where>	
	</sql>
	
	
	<!-- useGeneratedKeys="true" keyProperty="xxx" for sqlserver and mysql -->
	<!-- xxx 为java对象属性,必须有setter方法, 指定useGeneratedKeys和keyProperty后，自动增长的字段值会自动赋值给此对象 -->
	<insert id="insert" useGeneratedKeys="true" keyProperty="id">
		<![CDATA[
			INSERT INTO `user` (
				`username`,
				`password` ,
				`age` 
			) VALUES (
				#{username, jdbcType=VARCHAR} ,
				#{password, jdbcType=VARCHAR} ,
				#{age, jdbcType=INTEGER} 
		    )
	    ]]>
	</insert>
	
	<select id="findUsers" resultMap="BaseResultMap">
	    SELECT <include refid="columns" />
	    FROM `user`
		<!--  <include refid="findWhere" />  -->
		<!-- <include refid="findWhereUseClass" />  -->
		<!-- where username = #{user.username} -->
  	</select>
</mapper>